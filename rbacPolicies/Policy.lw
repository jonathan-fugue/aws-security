import Fugue.System.Policy as .

composition

# Principals (Users)
adminUser:    User { userId: "admin" }
saboUser:     User { userId: "sabo" }
ciUser:       User { userId: "ci" }
readOnlyUser: User { userId: "readOnly" }

# Groups (Lists of Users)
adminGroup:    [adminUser,saboUser]
devOpsGroup:   [ciUser]
readOnlyGroup: [readOnlyUser]

# Accounts
fugueAcct:  NamedAccount { accountName: "fugue" }
devAcct:    NamedAccount { accountName: "dev" }
qaAcct:     NamedAccount { accountName: "qa" }
prodAcct:   NamedAccount { accountName: "prod" }
sharedAcct: NamedAccount { accountName: "shared" }

# Policies
adminRules: [
  accountTableRules {
    principals: adminGroup,
    actions: allAccountTableActions
  },
  accountRules {
    principals: [adminUser],
    accounts: [AllAccounts],
    actions: allAccountActions
  },
  rbacRules {
    principals: [adminUser],
    actions: allRbacActions
  }
]

devOpsRules: [
  accountRules {
    principals: devOpsGroup,
    accounts: [devAcct,qaAcct,prodAcct,sharedAcct],
    actions: [
      AccountRunProcess,
      AccountUpdateProcess,
      AccountStatusProcess,
      AccountKillProcess,
    ]
  }
]

readOnlyRules: [
  accountRules {
    principals: readOnlyGroup,
    accounts: [devAcct,qaAcct,prodAcct,sharedAcct],
    actions: [
      AccountStatusProcess,
      AccountHistoryProcess,
    ]
  }
]
